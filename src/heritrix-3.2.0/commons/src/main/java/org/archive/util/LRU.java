/*
 *  This file is part of the Heritrix web crawler (crawler.archive.org).
 *
 *  Licensed to the Internet Archive (IA) by one or more individual 
 *  contributors. 
 *
 *  The IA licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.archive.util;

import java.util.LinkedHashMap;
import java.util.Map;


/**
 * A least-recently used cache.  As new entries are added to the map, the
 * least-recently accessed entries are removed.
 * 
 * @author pjack
 *
 * @param <K>  The key type of the LRU
 * @param <V>  The value type of the LRU
 */
public class LRU<K,V> extends LinkedHashMap<K,V> {


    /**
     * Generated by Eclipse.
     */
    private static final long serialVersionUID = 1032420936705267913L;


    /**
     * The maximum number of entries to store in the cache.
     */
    private int max;


    /**
     * Constructor.
     * 
     * @param max  the maximum number of entries to cache
     */
    public LRU(int max) {
        super(max, (float)0.75, true);
        this.max = max;
    }
    
    
    @Override
    protected boolean removeEldestEntry(Map.Entry<K,V> entry) {
        return size() >= max;
    }

}
